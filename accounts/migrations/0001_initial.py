# Generated by Django 5.2 on 2025-05-28 16:16

import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CargoMembro',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('nome', models.CharField(max_length=50)),
                ('slug', models.SlugField(blank=True, unique=True)),
                ('cor', models.CharField(default='#FFFFFF', help_text='Código de cor HEX para visualização do cargo', max_length=20)),
                ('pode_moderar', models.BooleanField(default=False)),
                ('pode_fixar_topicos', models.BooleanField(default=False)),
                ('pode_fechar_topicos', models.BooleanField(default=False)),
                ('pode_editar_outros_posts', models.BooleanField(default=False)),
                ('pode_excluir_outros_posts', models.BooleanField(default=False)),
                ('pode_banir_usuarios', models.BooleanField(default=False)),
                ('ordem', models.PositiveSmallIntegerField(default=0)),
            ],
            options={
                'verbose_name': 'Cargo de membro',
                'verbose_name_plural': 'Cargos de membros',
                'ordering': ['ordem', 'nome'],
            },
        ),
        migrations.CreateModel(
            name='Usuario',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('apelido', models.CharField(blank=True, help_text='Nome de exibição opcional', max_length=30)),
                ('avatar', models.ImageField(blank=True, null=True, upload_to='avatares/')),
                ('data_nascimento', models.DateField(blank=True, null=True, verbose_name='Data de Nascimento')),
                ('localizacao', models.CharField(blank=True, max_length=100, verbose_name='Localização')),
                ('biografia', models.TextField(blank=True, verbose_name='Sobre mim')),
                ('site', models.URLField(blank=True)),
                ('total_itens', models.PositiveIntegerField(default=0, help_text='Total de mensagens, tópicos e conteúdos')),
                ('reputacao', models.IntegerField(default=0, help_text='Pontuação de reações recebidas')),
                ('answers', models.PositiveIntegerField(default=0, help_text='Número de respostas marcadas como solução')),
                ('dias_ganhos', models.PositiveIntegerField(default=0, help_text='Dias com prêmios ou recompensas')),
                ('cadastrado_em', models.DateTimeField(auto_now_add=True)),
                ('ultimo_acesso', models.DateTimeField(blank=True, null=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('seguidores', models.ManyToManyField(blank=True, related_name='seguindo', to=settings.AUTH_USER_MODEL)),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
                ('cargos', models.ManyToManyField(blank=True, related_name='usuarios', to='accounts.cargomembro')),
            ],
            options={
                'verbose_name': 'Usuário',
                'verbose_name_plural': 'Usuários',
            },
        ),
        migrations.CreateModel(
            name='VisitaPerfil',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('timestamp', models.DateTimeField(auto_now_add=True)),
                ('data', models.DateField(auto_now_add=True)),
                ('usuario_visitado', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visitas_recebidas', to=settings.AUTH_USER_MODEL)),
                ('visitante', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='visitas_realizadas', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Visita de Perfil',
                'verbose_name_plural': 'Visitas de Perfil',
                'ordering': ['-timestamp'],
                'unique_together': {('usuario_visitado', 'visitante', 'data')},
            },
        ),
    ]
